# [str]: Path to game settings (SETTINGS) folder
game.settings=./save

# [int]: Sync offset in ms
game.sync_offset=115

# [double]: Sync multiplier
game.sync_multiplier=4.166667

# [double]: Volume of music playback
game.music_vol=1.000000

# [double]: Volume of sound effects playback
game.sfx_vol=1.000000

# [bool (0/1)]: Enable this option when running 1st or 2nd. This uses different file system redirects for the game directory as well as enables a fix. Without this, the game throws errors about not finding files
game.1st_2nd_fs=0

# [bool (0/1)]: Force game into window mode
patch.gfx.windowed=0

# [bool (0/1)]: Enable file call monitoring
patch.hook_mon.file=0

# [bool (0/1)]: Enable file system related call monitoring
patch.hook_mon.fs=0

# [bool (0/1)]: Enable IO syscall monitoring
patch.hook_mon.io=0

# [bool (0/1)]: Enable any file/IO open call monitoring
patch.hook_mon.open=0

# [bool (0/1)]: Enable libusb call monitoring
patch.hook_mon.usb=0

# [bool (0/1)]: Disable the built in keyboard inputs for test (F1), service (F2) and clear (F3)
patch.hook_main_loop.disable_built_in_inputs=0

# [str]: Path to a library implementing the x11-input-handler api to capture X11 keyboard inputs
patch_hook_main_loop.x11_input_handler=

# [str]: Path to library implementing the piuio api for piuio emulation
patch.piuio.emu_lib=

# [bool (0/1)]: Enable game exit on Test + Service
patch.piuio_exit.test_serv=0

# [str]: Select the sound device to open on snd_pcm_open
patch.sound.device=

# [bool (0/1)]: Enable debug output for the fmod library. This requires you to use the fmodexL.so instead of the standard fmodex.so
patch.sound.debug_output=0

# [bool (0/1)]: Halt on sigsegv to attach a debugger to the process
patch.sigsegv.halt_on_segv=0

# [str]: Print the log output to the specified file
util.log.file=pumptools.log

# [int]: Set the log level (0-4)
util.log.level=4
